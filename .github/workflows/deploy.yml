name: OurHood CI/CD Workflow

on:
  push:
    branches: [ "develop" ]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build without test
        run: ./gradlew clean build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      # ECR 로그인
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker 이미지 빌드 및 AWS ECR로 푸시
      - name: Build Docker Image And Push to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ourhood-server
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 서버로 docker-compose 파일 전송
      - name: Copy docker-compose file to EC2
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr
          remote_host: ${{ secrets.EC2_HOST }}
          remote_user: ${{ secrets.EC2_USERNAME }}
          remote_key: ${{ secrets.EC2_KEY }}
          path: docker-compose.yml
          remote_path: /home/ubuntu

      - name: Copy nginx config directory to EC2
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr
          remote_host: ${{ secrets.EC2_HOST }}
          remote_user: ${{ secrets.EC2_USERNAME }}
          remote_key: ${{ secrets.EC2_KEY }}
          path: nginx/
          remote_path: /home/ubuntu/nginx

      - name: Create private_key.pem from Secret
        run: echo "${{ secrets.CLOUDFRONT_PRIVATE_KEY }}" > private_key.pem
        shell: bash

      - name: Copy private_key.pem to EC2
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr
          remote_host: ${{ secrets.EC2_HOST }}
          remote_user: ${{ secrets.EC2_USERNAME }}
          remote_key: ${{ secrets.EC2_KEY }}
          path: private_key.pem
          remote_path: /home/ubuntu

      # EC2로 배포
      - name: AWS EC2 Server Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "${{ secrets.ENV_PROD }}" > .env
            export IMAGE_FULL_URL=${{ steps.login-ecr.outputs.registry }}/ourhood-server:${{ github.sha }}
            docker compose up -d
            docker image prune -a -f